"use client";

import Image from "next/image";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { BookOpen, BrainCircuit, AlertCircle, Volume2, VolumeX, Image as ImageIcon } from "lucide-react";
import type { AnalyzeUploadedContentOutput } from '@/ai/flows/analyze-uploaded-content';
import type { AnswerWithWebSearchOutput } from '@/ai/flows/answer-with-web-search';
import type { useSpeech } from '@/hooks/useSpeech';

// Combined type for answer data, including potential image URI
type CombinedAnswerData = (AnalyzeUploadedContentOutput | AnswerWithWebSearchOutput) & { generatedImageUri?: string };

interface AnswerDisplayCardProps {
  answerData: CombinedAnswerData | null;
  isLoading: boolean;
  speechControl: ReturnType<typeof useSpeech>;
}

export function AnswerDisplayCard({ answerData, isLoading, speechControl }: AnswerDisplayCardProps) {
  const { isSpeaking, speak, cancelSpeaking, supported: speechSupported } = speechControl;

  const handleSpeak = () => {
    if (answerData && answerData.answer) {
      if (isSpeaking) {
        cancelSpeaking();
      } else {
        speak(answerData.answer);
      }
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BrainCircuit className="w-6 h-6 text-primary animate-pulse" />
             Generating Answer...
          </CardTitle>
          <CardDescription>Please wait while the AI processes your query.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-8 w-3/4" />
          <Skeleton className="h-4 w-full" />
          <Skeleton className="h-4 w-5/6" />
          <Skeleton className="h-4 w-4/6" />
          <Skeleton className="h-40 w-full" /> {/* Placeholder for potential image */}
        </CardContent>
      </Card>
    );
  }

  if (!answerData) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
          <BrainCircuit className="w-6 h-6 text-muted-foreground" />
            AI Response
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">Your answer will appear here once you submit a question.</p>
        </CardContent>
      </Card>
    );
  }
  
  const isError = answerData.answer.toLowerCase().includes("error") || answerData.answer.toLowerCase().includes("sorry");

  return (
    <Card className="w-full max-w-xl mx-auto bg-white/90 shadow-lg rounded-2xl border-0 p-0">
      <CardHeader className="flex flex-row items-center justify-between px-6 pt-6 pb-2">
        <div className="flex items-center gap-2">
          {isError ? <AlertCircle className="w-6 h-6 text-red-500" /> : <BrainCircuit className="w-6 h-6 text-indigo-600" />}
          <CardTitle className="text-lg font-semibold text-blue-900">AI Response</CardTitle>
        </div>
        {speechSupported && answerData && answerData.answer && !isError && (
          <Button variant="outline" size="icon" onClick={handleSpeak} aria-label={isSpeaking ? "Stop speaking" : "Speak answer"} className="bg-white/80 hover:bg-blue-50 border-0 shadow-none">
            {isSpeaking ? <VolumeX className="w-5 h-5 text-red-500" /> : <Volume2 className="w-5 h-5 text-indigo-600" />}
          </Button>
        )}
      </CardHeader>
      <CardContent className="px-6 pb-6">
        {isError ? (
          <Alert variant="destructive" className="rounded-xl">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{answerData.answer}</AlertDescription>
          </Alert>
        ) : (
          <div className="space-y-4">
            <div className="rounded-xl bg-blue-50 text-blue-900 px-5 py-3 shadow-sm break-words font-sans text-base leading-relaxed">
              <p className="whitespace-pre-line">{answerData.answer}</p>
            </div>

            {answerData.generatedImageUri && (
              <div className="mt-4 p-4 border rounded-md bg-secondary/30">
                <h3 className="text-sm font-semibold mb-2 flex items-center gap-1">
                  <ImageIcon className="w-4 h-4" />
                  Generated Image:
                </h3>
                <div className="relative w-full aspect-video overflow-hidden rounded-md shadow-md">
                  <Image 
                    src={answerData.generatedImageUri} 
                    alt="Generated visual representation" 
                    layout="fill" 
                    objectFit="contain"
                    data-ai-hint="graph data" 
                  />
                </div>
                 <p className="text-xs text-muted-foreground mt-1">Image generated by AI based on document content.</p>
              </div>
            )}

            {answerData.sources && answerData.sources.length > 0 && (
              <div className="mt-4">
                <h3 className="text-sm font-semibold mb-2 flex items-center gap-1">
                  <BookOpen className="w-4 h-4" />
                  Sources:
                </h3>
                <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
                  {answerData.sources.map((source, index) => (
                    <li key={index} className="truncate">{source}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
